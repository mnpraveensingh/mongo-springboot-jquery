package com.mindtree.lwb.web.helper.upload;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.DataValidation;
import org.apache.poi.ss.usermodel.DataValidationConstraint;
import org.apache.poi.ss.usermodel.DataValidationHelper;
import org.apache.poi.ss.usermodel.Name;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.util.CellRangeAddressList;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;
import org.apache.poi.xssf.usermodel.XSSFName;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import com.mindtree.lwb.manager.master.MasterManager;
import com.mindtree.lwb.model.CountryInfo;
import com.mindtree.lwb.model.LWBCode;
import com.mindtree.lwb.service.util.LWBServiceUtil;

public class MultiExcelSheet {

	public static void updateInExcel(List<LWBCode> businessGroups, List<LWBCode> subVerticals,
			List<CountryInfo> countriesForCurrencyList, String xlsxFilename, XSSFWorkbook xcelObject, XSSFSheet sheet)
			throws IOException {

		updateAccountsInExcelFile(businessGroups, subVerticals, countriesForCurrencyList, xlsxFilename, xcelObject,
				sheet);
	}

	public static void updateAccountsInExcelFile(List<LWBCode> businessGroups, List<LWBCode> subVerticals,
			List<CountryInfo> countriesForCurrencyList, String xlsxFilename, XSSFWorkbook xcelObject, XSSFSheet sheet)
			throws IOException {
		
		createCellValidation(xcelObject, sheet);
		FileOutputStream out = new FileOutputStream(new File(xlsxFilename));
		xcelObject.write(out);
		out.close();

	}

	private static void createCellValidation(XSSFWorkbook xcelObject, XSSFSheet sheet) {
		XSSFRow row = sheet.getRow(0);
		CreationHelper createHelper = xcelObject.getCreationHelper();
		XSSFDataValidationHelper dvHelper = new XSSFDataValidationHelper(sheet);
		DataValidationHelper validationHelper = new XSSFDataValidationHelper(sheet);
		MasterManager masterManager = LWBServiceUtil.getApplicationObjectByClassName(MasterManager.class);

		if (row.getCell(22).getStringCellValue().equalsIgnoreCase("Currency")) {
			XSSFSheet hidden = xcelObject.createSheet("CurrencyData");
			List<CountryInfo> countriesForCurrencyList = masterManager.getCountries();
			List<String> currencyList = new ArrayList<String>();
			for (CountryInfo country : countriesForCurrencyList) {
				if (!country.getCurrencyCode().isEmpty()) {
					currencyList.add(country.getCurrencyCode() + " [ " + country.getCurrencyName() + " ] ");
				}
			}
			List<String> listWithoutDuplicates = currencyList.stream().distinct().collect(Collectors.toList());
			String[] dropdownVal = new String[listWithoutDuplicates.size()];
			for (int cnt = 0; cnt < listWithoutDuplicates.size(); cnt++) {
				String name = listWithoutDuplicates.get(cnt);
				XSSFRow row1 = hidden.createRow(cnt);
				XSSFCell cell = row1.createCell(0);
				cell.setCellValue(name);
				dropdownVal[cnt] = listWithoutDuplicates.get(cnt);
			}
			CellRangeAddressList addressList = new CellRangeAddressList(1, 200, row.getCell(22).getColumnIndex(),
					row.getCell(22).getColumnIndex());
			DataValidationConstraint constraint = validationHelper.createExplicitListConstraint(dropdownVal);
			constraint = validationHelper.createFormulaListConstraint("CurrencyData!$A$1:$A$" + dropdownVal.length);
			DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
			dataValidation.setSuppressDropDownArrow(true);
			xcelObject.setSheetHidden(1, true);
			sheet.addValidationData(dataValidation);
		}

		if (row.getCell(28).getStringCellValue().equalsIgnoreCase("businessGroup")) {
			XSSFSheet hidden1 = xcelObject.createSheet("BusinessGroup");
			List<LWBCode> businessGroups = masterManager.getCode("Business Group");
			String[] dropdownVal = new String[businessGroups.size()];
			for (int cnt = 0; cnt < businessGroups.size(); cnt++) {
				String name = businessGroups.get(cnt).getLwbCodeName();
				XSSFRow row1 = hidden1.createRow(cnt);
				XSSFCell cell = row1.createCell(0);
				cell.setCellValue(name);
				dropdownVal[cnt] = businessGroups.get(cnt).getLwbCodeName();
			}
			CellRangeAddressList addressList = new CellRangeAddressList(1, 200, row.getCell(28).getColumnIndex(),
					row.getCell(28).getColumnIndex());
			DataValidationConstraint constraint = validationHelper.createExplicitListConstraint(dropdownVal);
			constraint = validationHelper
					.createFormulaListConstraint("BusinessGroup!$A$1:$A$" + dropdownVal.length);
			DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
			dataValidation.setSuppressDropDownArrow(true);
			xcelObject.setSheetHidden(1, true);
			sheet.addValidationData(dataValidation);
		}

		if (row.getCell(30).getStringCellValue().equalsIgnoreCase("subVertical")) {
			XSSFSheet hidden1 = xcelObject.createSheet("SubVertical");
			List<LWBCode> subVerticals = masterManager.getCode("SUB Vertical");
			String[] dropdownVal = new String[subVerticals.size()];
			for (int cnt = 0; cnt < subVerticals.size(); cnt++) {
				String name = subVerticals.get(cnt).getLwbCodeName();
				XSSFRow row1 = hidden1.createRow(cnt);
				XSSFCell cell = row1.createCell(0);
				cell.setCellValue(name);
				dropdownVal[cnt] = subVerticals.get(cnt).getLwbCodeName();
			}
			CellRangeAddressList addressList = new CellRangeAddressList(1, 200, row.getCell(30).getColumnIndex(),
					row.getCell(30).getColumnIndex());
			DataValidationConstraint constraint = validationHelper.createExplicitListConstraint(dropdownVal);
			constraint = validationHelper
					.createFormulaListConstraint("SubVertical!$A$1:$A$" + dropdownVal.length);
			DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);
			dataValidation.setSuppressDropDownArrow(true);
			xcelObject.setSheetHidden(1, true);
			sheet.addValidationData(dataValidation);
		}
	}
}
